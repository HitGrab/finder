"use strict";(self.webpackChunkfinder_docs=self.webpackChunkfinder_docs||[]).push([[761],{1445:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>f,frontMatter:()=>s,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"mixins/filters-mixin","title":"Filters Mixin","description":"The Filters mixin can be accessed from finder.filters.","source":"@site/docs/mixins/filters-mixin.md","sourceDirName":"mixins","slug":"/mixins/filters-mixin","permalink":"/finder/mixins/filters-mixin","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Mixins","permalink":"/finder/mixins/"},"next":{"title":"GroupBy Mixin","permalink":"/finder/mixins/group-by-mixin"}}');var r=i(4848),l=i(8453);const s={},o="Filters Mixin",a={},u=[];function d(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",strong:"strong",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"filters-mixin",children:"Filters Mixin"})}),"\n",(0,r.jsxs)(n.p,{children:["The Filters mixin can be accessed from ",(0,r.jsx)(n.code,{children:"finder.filters"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Type Signature"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"finder.filters {\n\n    // Processed filter values keyed by filter rule id.\n    // If the rule has a defaultValue and no local state, the default will be returned.\n    // If a rule is required, the first valid option will be returned if possible.\n    values: {[filter.id]: any}\n\n    // Raw Filter values keyed by filter rule id.\n    // This is the raw state without any processing.\n    raw: {[filter.id]: any}\n\n    // Flat array of active rules.\n    // A filter rule is considered active if the rule has `required:true`, or has any defined value.\n    activeRules: FilterRule[]\n\n    // All rules, active or not. Useful for building control interfaces.\n    rules: FilterRule[]\n\n    // A filter rule is considered active if the rule has `required:true`, or has any defined value.\n    isActive(identifier: string | FilterRule) : boolean\n\n    // The processed value for a filter rule.\n    // If the rule has a defaultValue and no local state, the default will be returned.\n    // If a rule is required, the first valid option will be returned if possible.\n    get(identifier: string | FilterRule): any\n\n\n    // Check the processed value for a filter rule or option.\n    // For a boolean rule, if required or set, it will return true.\n    // For rules with multiple options, you can pass an option to see if that value is selected.\n    has(identifier: string | FilterRule, optionValue?: FilterOption | any): boolean\n\n    // Toggle a boolean filter or an option for a multiple filter.\n    toggle(identifier: string | FilterRule, optionValue?: FilterOption | any): void\n\n    // Set a filter value.\n    set(identifier: string | FilterRule, value: any): void\n\n    // Delete the internal state for this rule.\n    delete(identifier: string | FilterRule, value: any)\n\n    // Test an array of filter rules against the items array. Useful for building input controls.\n    test(options: { rules?: FilterRule[]; values?: any; context?: FContext; isAdditive?: boolean;})\n\n    // Test a filter rule against the items array. Useful for building input controls.\n    testRule(options: { rule?: FilterRule; value?: any; context?: FContext; isAdditive?: boolean;})\n\n    // Test every option in a filter against the items array. Useful for building input controls.\n    testRuleOptions(options: { rules: FilterRule; value?: any; context?: FContext; isAdditive?: boolean;})\n\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example Usage"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function FilterControlList() {\n    const finder = useFinder();\n    return finder.rules.map((rule) => {\n        const value = finder.filter.get(rule);\n        return (\n            <FilterControl\n                rule={rule}\n                value={value}\n                onChange((incomingValue:any) => finder.filters.set(incomingValue))\n                key={rule.id}\n            />\n        );\n    })\n}\n\n"})})]})}function f(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>o});var t=i(6540);const r={},l=t.createContext(r);function s(e){const n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);