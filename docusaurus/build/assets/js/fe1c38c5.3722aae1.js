"use strict";(self.webpackChunkfinder_docs=self.webpackChunkfinder_docs||[]).push([[9553],{2052:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>d,frontMatter:()=>l,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"rules/effects/rule-effects","title":"Rule Effects","description":"ruleEffects are triggered when certain rules are changed. It allows you to couple rules to each other wihout adding complex onChange events.","source":"@site/docs/rules/effects/rule-effects.md","sourceDirName":"rules/effects","slug":"/rules/effects/rule-effects","permalink":"/finder/rules/effects/rule-effects","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Effects","permalink":"/finder/rules/effects/"},"next":{"title":"Search Effects","permalink":"/finder/rules/effects/search-effects"}}');var s=t(4848),i=t(8453);const l={},c="Rule Effects",o={},a=[];function f(e){const n={admonition:"admonition",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"rule-effects",children:"Rule Effects"})}),"\n",(0,s.jsx)(n.p,{children:"ruleEffects are triggered when certain rules are changed. It allows you to couple rules to each other wihout adding complex onChange events."}),"\n",(0,s.jsx)(n.admonition,{title:"Use cases",type:"info",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"I want to reset sort order when the user changes their filters."}),"\n",(0,s.jsx)(n.li,{children:"Two filters are mutually exclusive, and one should be disabled when the other is active."}),"\n"]})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Type Signature"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"ruleEffect(\n    string | FinderRule | (string | FinderRule)[]\n    | ((items: FItem[], context: FContext) =>\n        string | FinderRule<FItem> | (string | FinderRule<FItem>)[]\n    ),\n    (instance:FinderCore) => void\n),\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example Usage"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'const rules = finderRuleset<Fruit>([\n    filterRule({\n        id: "is_an_orange",\n        filterFn: (item) => item.type === "orange",\n        boolean: true,\n    }),\n    filterRule({\n        id: "is_an_apple",\n        filterFn: (item) => item.type === "apple",\n        boolean: true,\n        defaultValue: true,\n    }),\n    filterRule({\n        id: "is_fresh",\n        filterFn: (item) => item.is_fresh,\n        boolean: true,\n    }),\n]);\n\n// whenever these rules are changed, the callback will be triggered.\nconst effects = [\n    ruleEffect(["is_an_orange", "is_an_apple"], (instance) => {\n        if (instance.filters.has("is_an_orange")) {\n            instance.filters.toggle("is_an_apple");\n        }\n    }),\n];\n\nconst finder = new FinderCore(fruits, { rules, effects });\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"Changes triggered inside an effect callback are processed silently, and do not trigger Events."})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(f,{...e})}):f(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>c});var r=t(6540);const s={},i=r.createContext(s);function l(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);