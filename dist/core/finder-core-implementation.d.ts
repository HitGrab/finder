import { SearchMixin } from "./search";
import { FiltersMixin } from "./filters";
import { SortByMixin } from "./sort-by";
import { GroupByMixin } from "./group-by";
import { PaginationMixin } from "./pagination";
import { FinderCore } from "./finder-core";
import { FinderConstructorOptions, SnapshotSerializedMixins, EventCallback } from "./types/core-types";
import { FinderEventName } from "./types/event-types";
import { FinderRule } from "./types/rule-types";
declare class FinderCoreImplementation<FItem, FContext> {
    #private;
    isReady: boolean;
    isLoading: boolean;
    disabled: boolean;
    updatedAt: number;
    search: SearchMixin<FItem>;
    filters: FiltersMixin;
    sortBy: SortByMixin<FItem>;
    groupBy: GroupByMixin<FItem, FContext>;
    pagination: PaginationMixin<FItem>;
    context: FContext;
    getInstanceFn: () => FinderCore;
    constructor(items: FItem[] | null | undefined, { rules, effects, initialSearchTerm, initialSortBy, initialSortDirection, initialGroupBy, initialFilters, context, page, numItemsPerPage, isLoading, disabled, requireGroup, ignoreSortByRulesWhileSearchRuleIsActive, onInit, onReady, onFirstUserInteraction, onChange, }: FinderConstructorOptions<FItem, FContext>, getInstanceFn: () => FinderCore);
    emitFirstUserInteraction(): void;
    get items(): FItem[];
    get matches(): import("./types/core-types").ResultSnapshot<FItem>;
    test(mixins: SnapshotSerializedMixins, isAdditive?: boolean): FItem[];
    get isEmpty(): boolean;
    get hasMatches(): boolean;
    get events(): {
        on: (event: FinderEventName, callback: EventCallback) => void;
        off: (event: FinderEventName, callback: EventCallback) => void;
        silently: (callback: EventCallback) => void;
        isSilent: () => boolean;
    };
    getRule(identifier: string | FinderRule<FItem>): FinderRule<FItem>;
    get state(): "loading" | "empty" | "groups" | "items" | "noMatches";
    setItems(items: FItem[] | null | undefined): void;
    setIsLoading(value?: boolean): void;
    setIsDisabled(value?: boolean): void;
    setRules(definitions: FinderRule<FItem, FContext>[]): void;
    setContext(context: FContext): void;
}
export { FinderCoreImplementation };
