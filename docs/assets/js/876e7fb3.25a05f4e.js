"use strict";(self.webpackChunkfinder_docs=self.webpackChunkfinder_docs||[]).push([[1997],{6257:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>u});const l=JSON.parse('{"id":"tutorial/basic-usage/filters","title":"Filters","description":"Filters come in three types; Boolean, Single value, and Multiple value.","source":"@site/docs/tutorial/basic-usage/filters.md","sourceDirName":"tutorial/basic-usage","slug":"/tutorial/basic-usage/filters","permalink":"/finder/tutorial/basic-usage/filters","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Search","permalink":"/finder/tutorial/basic-usage/search"},"next":{"title":"Sort By","permalink":"/finder/tutorial/basic-usage/sort-by"}}');var t=i(4848),r=i(8453);const s={sidebar_position:1},a="Filters",o={},u=[{value:"Boolean filter",id:"boolean-filter",level:2},{value:"Single value filter",id:"single-value-filter",level:2},{value:"Multiple value filter",id:"multiple-value-filter",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"filters",children:"Filters"})}),"\n",(0,t.jsxs)(n.p,{children:["Filters come in three types; ",(0,t.jsx)(n.strong,{children:"Boolean"}),", ",(0,t.jsx)(n.strong,{children:"Single value"}),", and ",(0,t.jsx)(n.strong,{children:"Multiple value"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Filters default to having a single value, but boolean or multiple value mode can be enabled by adding ",(0,t.jsx)(n.code,{children:"boolean: true"})," or ",(0,t.jsx)(n.code,{children:"multiple: true"})," to your filter definition."]}),"\n",(0,t.jsx)(n.p,{children:"Let's build some common apartment hunting filters that'll let Joe find the perfect pad."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Is available immediately ( boolean )"}),"\n",(0,t.jsx)(n.li,{children:"Price ( a single value )"}),"\n",(0,t.jsx)(n.li,{children:"Number of bedrooms ( allow multiple values )"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"boolean-filter",children:"Boolean filter"}),"\n",(0,t.jsx)(n.p,{children:"Filter, SortBy, and GroupBy rules all require a unique id."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'filterRule<ApartmentListing>({\n    id: "is_available_immediately",\n    filterFn: (listing) => listing.is_available_immediately,\n    boolean: true,\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"single-value-filter",children:"Single value filter"}),"\n",(0,t.jsx)(n.p,{children:"This example provides an array of predefined options, but options are, well, optional!"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'filterRule<ApartmentListing, [min: number, max: number]>({\n    id: "price",\n    filterFn: (listing, value) => {\n        const [min, max] = value;\n        return listing.price >= min && listing.price <= max;\n    },\n    options: [\n        {\n            label: "under 1k",\n            value: [0, 1000],\n        },\n        {\n            label: "1k-2k",\n            value: [1000, 2000],\n        },\n    ],\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"multiple-value-filter",children:"Multiple value filter"}),"\n",(0,t.jsx)(n.p,{children:"Options can also be generated at runtime with a generator function. When Finder receives an items array, it 'hydrates' the filter definition with the returned option array."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'filterRule<ApartmentListing, number>({\n    id: "num_bedrooms_filter",\n    filterFn: (listing, value) => value.includes(listing.num_bedrooms),\n    options: ({ items, context }) => {\n        const allNumBedrooms = items.map((listing) => listing.num_bedrooms);\n        const uniqueNumBedrooms = new Set(allNumBedrooms);\n        return Array.from(uniqueNumBedrooms).map((numBedrooms) => {\n            return {\n                label: `${numBedrooms} Bedrooms`,\n                value: numBedrooms,\n            };\n        });\n    },\n    multiple: true,\n});\n'})}),"\n",(0,t.jsx)(n.p,{children:"Filters will be re-hydrated if the items array or context reference is changed."}),"\n",(0,t.jsx)(n.admonition,{title:"Further reading",type:"info",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/rules/filter-rule",children:"FilterRule"})," definition"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/api/filters-api",children:"Filters API"})}),"\n"]})})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var l=i(6540);const t={},r=l.createContext(t);function s(e){const n=l.useContext(r);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),l.createElement(r.Provider,{value:n},e.children)}}}]);