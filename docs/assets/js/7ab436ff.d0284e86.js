"use strict";(self.webpackChunkfinder_docs=self.webpackChunkfinder_docs||[]).push([[8314],{6480:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"getting-started/context/index","title":"Injecting Context","description":"Often, you\'ll need Finder to be aware of external context.","source":"@site/docs/getting-started/context/index.md","sourceDirName":"getting-started/context","slug":"/getting-started/context/","permalink":"/finder/getting-started/context/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Et voila!","permalink":"/finder/getting-started/basic-usage/result"},"next":{"title":"Dependent Rules","permalink":"/finder/getting-started/context/context-rules"}}');var s=n(4848),o=n(8453);const i={},c="Injecting Context",a={},d=[];function l(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"injecting-context",children:"Injecting Context"})}),"\n",(0,s.jsx)(t.p,{children:"Often, you'll need Finder to be aware of external context."}),"\n",(0,s.jsx)(t.p,{children:"There's two main use cases:"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"1. Finder.Content components are dependent on context"})}),"\n",(0,s.jsx)(t.p,{children:"Your items might have multiple display formats ( i.e: grid or list ), or need to update when an item is selected."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"2. Rule predicates are dependent on context"})}),"\n",(0,s.jsx)(t.p,{children:"A searchRule or filterRule might need to be aware of user context, like checking a user's location or preferences."}),"\n",(0,s.jsxs)(t.p,{children:["Thankfully, both are easy to do! A ",(0,s.jsx)(t.code,{children:"<Finder />"})," component can be passed an object reference via the ",(0,s.jsx)(t.code,{children:"context"})," prop, which will be forwarded to all rule predicates and render props."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"function MyComponent() {\n    const items = useItems();\n    const [state, setState] = useState();\n    const context = useMemo(() => {\n        return {\n            state,\n            setState,\n            'my_props_here',\n        }\n    }, [state, setState])\n\n    return (\n        <Finder items={items} rules={rules} context={context}>\n            <Finder.Content>\n                {{\n                    items: MyItemsComponent\n                }}\n            </Finder.Content>\n        </Finder>\n    );\n}\n\n"})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var r=n(6540);const s={},o=r.createContext(s);function i(e){const t=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);