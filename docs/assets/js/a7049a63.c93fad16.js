"use strict";(self.webpackChunkfinder_docs=self.webpackChunkfinder_docs||[]).push([[568],{7415:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>f});const r=JSON.parse('{"id":"rules/effects/search-effects","title":"Search Effects","description":"searchEffects are triggered when the user searches for certain terms. You may want to suggest a filter, or preload data based on their search terms.","source":"@site/docs/rules/effects/search-effects.md","sourceDirName":"rules/effects","slug":"/rules/effects/search-effects","permalink":"/finder/rules/effects/search-effects","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Rule Effects","permalink":"/finder/rules/effects/rule-effects"},"next":{"title":"FinderRuleset","permalink":"/finder/rules/ruleset"}}');var n=s(4848),c=s(8453);const a={},i="Search Effects",o={},f=[];function l(e){const t={admonition:"admonition",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",strong:"strong",...(0,c.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"search-effects",children:"Search Effects"})}),"\n",(0,n.jsx)(t.p,{children:"searchEffects are triggered when the user searches for certain terms. You may want to suggest a filter, or preload data based on their search terms."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Type Signature"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"ruleEffect(\n    haystack: string | string[]\n    | ((items: FItem[], context: FContext) => string | string[]),\n    callback: (instance:FinderCore) => void),\n    exact: boolean\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Example Usage"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:'const rules = finderRuleset<Fruit>([\n    searchRule({\n        searchFn: (item) => item.name,\n    }),\n]);\n\n// whenever the user searches for these searchterms, the callback will be triggered.\nconst effects = [\n    searchEffect(["best", "tastiest", "juiciest"], (instance) => {\n        showGuavaToast();\n    }),\n];\n\nconst finder = new FinderCore(fruits, { rules, effects });\n'})}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsx)(t.p,{children:"Changes triggered inside an effect callback are processed silently, and do not trigger Events."})})]})}function d(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>i});var r=s(6540);const n={},c=r.createContext(n);function a(e){const t=r.useContext(c);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),r.createElement(c.Provider,{value:t},e.children)}}}]);