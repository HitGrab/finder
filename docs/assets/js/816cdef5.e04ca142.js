"use strict";(self.webpackChunkfinder_docs=self.webpackChunkfinder_docs||[]).push([[649],{6185:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"tutorial/ruleset/filters","title":"Filters","description":"Let\'s build some common filters.","source":"@site/docs/tutorial/ruleset/filters.md","sourceDirName":"tutorial/ruleset","slug":"/tutorial/ruleset/filters","permalink":"/finder/tutorial/ruleset/filters","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Search","permalink":"/finder/tutorial/ruleset/search"},"next":{"title":"Sort By","permalink":"/finder/tutorial/ruleset/sort-by"}}');var l=t(4848),r=t(8453);const o={sidebar_position:1},s="Filters",a={},u=[{value:"Boolean filter: Immediate availability",id:"boolean-filter-immediate-availability",level:2},{value:"Single value filter with defined options",id:"single-value-filter-with-defined-options",level:2},{value:"Multiple filter: Number of bedrooms",id:"multiple-filter-number-of-bedrooms",level:2},{value:"Context filter: Proximity to location",id:"context-filter-proximity-to-location",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"filters",children:"Filters"})}),"\n",(0,l.jsx)(n.p,{children:"Let's build some common filters."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Is available immediately"}),"\n",(0,l.jsx)(n.li,{children:"Price"}),"\n",(0,l.jsx)(n.li,{children:"Number of bedrooms"}),"\n",(0,l.jsx)(n.li,{children:"Promixity to a location"}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Filters come in three types; ",(0,l.jsx)(n.strong,{children:"Boolean"}),", ",(0,l.jsx)(n.strong,{children:"Single value"}),", and ",(0,l.jsx)(n.strong,{children:"Multiple value"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:["Filters default to having a single value, but boolean or multiple value mode can be enabled by adding ",(0,l.jsx)(n.code,{children:"boolean: true"})," or ",(0,l.jsx)(n.code,{children:"multiple: true"})," to your filter definition."]}),"\n",(0,l.jsx)(n.h2,{id:"boolean-filter-immediate-availability",children:"Boolean filter: Immediate availability"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"filterRule<ApartmentListing>({\n    filterFn: (listing) => listing.is_available_immediately,\n    boolean: true,\n});\n"})}),"\n",(0,l.jsx)(n.h2,{id:"single-value-filter-with-defined-options",children:"Single value filter with defined options"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"filterRule<ApartmentListing, [number:min, number:max]>({\n\n    // this predicate must be satisfied for an item to be returned.\n    filterFn: (listing, value) => {\n        const [min, max] = value;\n        return listing.price >= min && listing.price <= max;\n    },\n\n    // We can define an array of preset options.\n    options: [\n        {\n            label: 'under 1k'\n            value: [0, 1000]\n        }\n        {\n            label: '1k-2k'\n            value: [1000, 2000]\n        }\n    ]\n})\n"})}),"\n",(0,l.jsx)(n.h2,{id:"multiple-filter-number-of-bedrooms",children:"Multiple filter: Number of bedrooms"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"filterRule<ApartmentListing, number>({\n    filterFn: (listing, value) => value.includes(listing.num_bedrooms),\n\n    // Options can also be generated at runtime with a callback.\n    options: ({ items }) => {\n        const allNumBedrooms = items.map((listing) => listing.num_bedrooms);\n        const uniqueNumBedrooms = new Set(allNumBedrooms);\n        return Array.from(uniqueNumBedrooms).map((numBedrooms) => {\n            return {\n                label: `${numBedrooms} Bedrooms`,\n                value: numBedrooms,\n            };\n        });\n    },\n\n    // Allows for an array of values\n    multiple: true,\n});\n"})}),"\n",(0,l.jsx)(n.h2,{id:"context-filter-proximity-to-location",children:"Context filter: Proximity to location"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"filterRule<ApartmentListing, number>({\n\n    // \"Context\" can be any arbitrary value passed into the Finder component.\n    filterFn: (listing, value, context) => {\n        const { userX, userY } = context;\n        const distance = (listing.x, listing.y, userX, userY) => Math.hypot(userX - listing.y, userY - listing.y);\n        return distance <= value;\n    },\n\n    options: [\n        {\n            label: 'within 1k'\n            value: 1000\n        }\n        {\n            label: 'within 5k'\n            value: 5000\n        }\n    ]\n\n    // Allows for an array of values\n    multiple: true,\n});\n"})})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var i=t(6540);const l={},r=i.createContext(l);function o(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);