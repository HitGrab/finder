"use strict";(self.webpackChunkfinder_docs=self.webpackChunkfinder_docs||[]).push([[5684],{1637:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"getting-started/basic-usage/controls","title":"Build Controls","description":"Finder doesn\'t have any opinion on how controls are rendered. Rule definitions, and state accessors/mutators are exposed so you can roll your own controls.","source":"@site/docs/getting-started/basic-usage/controls.md","sourceDirName":"getting-started/basic-usage","slug":"/getting-started/basic-usage/controls","permalink":"/finder/getting-started/basic-usage/controls","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Display Matches","permalink":"/finder/getting-started/basic-usage/component"},"next":{"title":"Et voila!","permalink":"/finder/getting-started/basic-usage/result"}}');var o=t(4848),l=t(8453);const s={sidebar_position:4},i="Build Controls",a={},c=[{value:"Boolean filter checkbox",id:"boolean-filter-checkbox",level:2},{value:"Multiple value checkboxes",id:"multiple-value-checkboxes",level:2},{value:"Single value dropdown",id:"single-value-dropdown",level:2},{value:"SortBy radio buttons",id:"sortby-radio-buttons",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"build-controls",children:"Build Controls"})}),"\n",(0,o.jsx)(n.p,{children:"Finder doesn't have any opinion on how controls are rendered. Rule definitions, and state accessors/mutators are exposed so you can roll your own controls."}),"\n",(0,o.jsx)(n.h1,{id:"search-text-input",children:"Search text input"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'function SearchControl() {\n    const finder = useFinder();\n    const [query, setQuery] = useState<string>("");\n    const handleQueryChange = useCallback(\n        (value: string) => {\n            setQuery(value);\n            finder.search.setSearchTerm(value);\n        },\n        [finder.search],\n    );\n    const handleReset = useCallback(() => {\n        setQuery("");\n        finder.search.reset();\n    }, [finder.search]);\n\n    return (\n        <>\n            <input placeholder="Search" type="text" value={query} onInput={(e) => handleQueryChange(e.currentTarget.value)} />\n            {finder.search.hasSearchTerm && (\n                <button type="button" className="listContainer__search__resetButton" onClick={handleReset}>\n                    x\n                </button>\n            )}\n        </>\n    );\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"boolean-filter-checkbox",children:"Boolean filter checkbox"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'interface BooleanFilterControlProps {\n    ruleId: string;\n}\nfunction BooleanFilterControl({ ruleId }: BooleanFilterControlProps) {\n    const finder = useFinder();\n    const rule = finder.filters.getRule(ruleId);\n    const isChecked = finder.filters.has(rule);\n    return (\n        <label>\n            <input type="checkbox" checked={isChecked} onChange={() => finder.filters.toggle(rule)} />\n            {rule.label}\n        </label>\n    );\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"multiple-value-checkboxes",children:"Multiple value checkboxes"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'interface MultipleFilterControlProps {\n    ruleId: string;\n}\nfunction MultipleFilterControl({ ruleId }: MultipleFilterControlProps) {\n    const finder = useFinder();\n    const rule = finder.filters.getRule(ruleId);\n    return (\n        <ul>\n            {rule.options.map((option) => {\n                const isChecked = finder.filters.has(rule, option);\n                return (\n                    <li key={option.value}>\n                        <label>\n                            <input type="checkbox" checked={isChecked} onChange={() => finder.filters.toggle(rule, option)} />\n                            {option.label}\n                        </label>\n                    </li>\n                );\n            })}\n        </ul>\n    );\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"single-value-dropdown",children:"Single value dropdown"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'interface SingleValueControlProps {\n    ruleId: string\n}\nfunction SingleValueControl({ ruleId }: SingleValueControlProps) {\n    const finder = useFinder();\n    const rule = finder.filters.getRule(ruleId);\n    const ruleValue = finder.filters.get(rule);\n    const composedOptions = rule.required ? rule.options : [{ value: undefined, label: "All" }, ...rule.options];\n    const selectedOptionIndex = composedOptions.findIndex(({ value }) => value === ruleValue);\n    return (\n        <select\n            value={selectedOptionIndex}\n            onChange={(e) => {\n                const selectedOption = composedOptions.at(e.currentTarget.selectedIndex);\n                finder.filters.set(ruleId, selectedOption.value);\n            }}\n        >\n            {composedOptions.map((option, index) => {\n                return (\n                    // eslint-disable-next-line react/no-array-index-key\n                    <option value={index} key={index}>\n                        {option.label}\n                    </option>\n                );\n            })}\n        </select>\n    );\n}\n\n'})}),"\n",(0,o.jsx)(n.h2,{id:"sortby-radio-buttons",children:"SortBy radio buttons"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'function RadioSortBy() {\n    const finder = useFinder();\n\n    return (\n        <ul>\n            {finder.sortBy.rules.map((rule) => {\n                const isChecked = finder.sortBy.activeRule === rule;\n                return (\n                    <li key={rule.id}>\n                        <label>\n                            <input type="radio" checked={isChecked} onChange={() => finder.sortBy.set(rule)} />\n                            {rule.label}\n                        </label>\n                    </li>\n                );\n            })}\n        </ul>\n    );\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var r=t(6540);const o={},l=r.createContext(o);function s(e){const n=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);