"use strict";(self.webpackChunkfinder_docs=self.webpackChunkfinder_docs||[]).push([[302],{8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>s});var t=r(6540);const l={},o=t.createContext(l);function i(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),t.createElement(o.Provider,{value:n},e.children)}},9003:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"tutorial/controls","title":"Build Controls","description":"Finder doesn\'t have any opinion on how controls are rendered. Rule definitions, and state accessors/mutators are exposed so you can roll your own controls.","source":"@site/docs/tutorial/controls.md","sourceDirName":"tutorial","slug":"/tutorial/controls","permalink":"/finder/tutorial/controls","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Display Matches","permalink":"/finder/tutorial/component"},"next":{"title":"Rules","permalink":"/finder/rules/"}}');var l=r(4848),o=r(8453);const i={sidebar_position:4},s="Build Controls",u={},a=[{value:"Boolean filter",id:"boolean-filter",level:2},{value:"Multiple filter",id:"multiple-filter",level:2},{value:"Select filter",id:"select-filter",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"build-controls",children:"Build Controls"})}),"\n",(0,l.jsx)(n.p,{children:"Finder doesn't have any opinion on how controls are rendered. Rule definitions, and state accessors/mutators are exposed so you can roll your own controls."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"function FilterList() {\n    const finder = useFinder();\n\n    // loop through rule definitions to build controls\n    return finder.filters.rules.map((rule) => {\n        if (rule.boolean) {\n            return <BooleanFilterControl rule={rule} key={rule.id} />;\n        }\n        if (rule.multiple) {\n            return <MultipleFilterControl rule={rule} key={rule.id} />;\n        }\n        if (rule.options) {\n            return <SelectFilterControl rule={rule} key={rule.id} />;\n        }\n        return null;\n    })\n}\n"})}),"\n",(0,l.jsx)(n.h2,{id:"boolean-filter",children:"Boolean filter"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'interface BooleanFilterControlProps {\n    rule: FinderRule;\n}\nfunction BooleanFilterControl({ rule }: BooleanFilterControlProps) {\n    const finder = useFinder();\n    const isChecked = finder.filters.has(rule);\n    return (\n        <label>\n            <input\n                type="checkbox"\n                checked={isChecked}\n                onChange={() => finder.filters.toggle(rule)}\n            />\n            {rule.label}\n        </label>\n    )\n}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"multiple-filter",children:"Multiple filter"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'interface MultipleFilterControlProps {\n    rule: FinderRule;\n}\nfunction MultipleFilterControl({ rule }: MultipleFilterControlProps) {\n    const finder = useFinder();\n    return rule.options.map((option) => {\n        const isChecked = finder.filters.has(rule, option);\n        return (\n            <label key={option.value}>\n                <input\n                    type="checkbox"\n                    checked={isChecked}\n                    onChange={() => finder.filters.toggle(rule, option)}\n                />\n                {option.label}\n            </label>\n        );\n    })\n}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"select-filter",children:"Select filter"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"interface SelectFilterControlProps {\n    rule: FinderRule;\n}\nfunction SelectFilterControl({ rule }: SelectFilterControlProps) {\n    const finder = useFinder();\n    const value = finder.filters.get(rule);\n    return (\n        <select\n            value={value}\n            onChange={(e) => finder.filters.set(rule, e.currentTarget.value)}\n        >\n            {rule.options.map((option) => {\n                return <Option value={option.value} key={option.value}>{option.label}</Option>\n            })}\n        </select>\n    );\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}}}]);