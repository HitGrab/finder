"use strict";(self.webpackChunkfinder_docs=self.webpackChunkfinder_docs||[]).push([[3008],{7690:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>j,contentTitle:()=>f,default:()=>y,frontMatter:()=>g,metadata:()=>r,toc:()=>v});const r=JSON.parse('{"id":"getting-started/context/context-rules","title":"Dependent Rules","description":"User story:","source":"@site/docs/getting-started/context/context-rules.md","sourceDirName":"getting-started/context","slug":"/getting-started/context/context-rules","permalink":"/finder/getting-started/context/context-rules","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Injecting Context","permalink":"/finder/getting-started/context/"},"next":{"title":"Dependent Finder.Content components","permalink":"/finder/getting-started/context/injecting-state"}}');var o=t(4848),i=t(8453),s=t(4185),a=t(6540);const c={container:"container_AmUm",control:"control_Gz0L",list:"list_Er9I",item:"item_CxiS",image:"image_aPVS"};var d=t(1556),l=t(2543),u=t(6025);const h=(0,s.HF)([(0,s.RJ)({id:"can_afford",groupFn:(e,n)=>e.price<n.numCoins?"Can purchase":"Too expensive",sticky:{header:"Can purchase"}})]),x=d.a.helpers.multiple(function(){return{id:d.a.string.uuid(),price:(0,l.random)(1,10),image_index:(0,l.random)(0,31)}},{count:20});function m(){const[e,n]=(0,a.useState)(7),t=(0,a.useMemo)(()=>({numCoins:e}),[e]);return(0,o.jsx)("div",{className:c.container,children:(0,o.jsxs)(s.vR,{items:x,rules:h,context:t,requireGroup:!0,children:[(0,o.jsxs)("b",{children:["Hello Lindsay, you have $",e,"."]}),(0,o.jsxs)("div",{className:c.control,children:["$0",(0,o.jsx)("input",{type:"range",value:e,min:0,max:20,onInput:e=>n(Number(e.currentTarget.value))}),"$20"]}),(0,o.jsx)("div",{className:c.list,children:(0,o.jsx)(s.vR.Content,{children:{groups:p}})}),(0,o.jsx)("div",{className:"listContainer__credits",children:"Assets from https://mohammed-23446.itch.io/32-16x16-food-sprites"})]})})}function p({groups:e}){const{withBaseUrl:n}=(0,u.hH)();return e.map(e=>(0,o.jsx)(a.Fragment,{children:e.items.map(t=>(0,o.jsxs)("div",{className:c.item,"data-group-id":(0,l.kebabCase)(e.id),children:[(0,o.jsx)("div",{className:c.image,style:{backgroundImage:`url(${n("/img/food/food.png")})`,"--image-index":t.image_index}}),"$",t.price]},t.id))},e.id))}const g={},f="Dependent Rules",j={},v=[{value:"Define the context shape",id:"define-the-context-shape",level:3},{value:"Define our context-aware ruleset",id:"define-our-context-aware-ruleset",level:3},{value:"Memoize context reference",id:"memoize-context-reference",level:3}];function C(e){const n={admonition:"admonition",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"dependent-rules",children:"Dependent Rules"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"User story:"}),"\nLindsay McUser wants to buy in-game food to feed their virtual pets, but they only have a limited amount of coins."]}),"\n",(0,o.jsx)(m,{}),"\n",(0,o.jsx)(n.h3,{id:"define-the-context-shape",children:"Define the context shape"}),"\n",(0,o.jsx)(n.p,{children:"First, we need to inform Finder what our context will look like."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"interface PetFoodStoreContext {\n    numCoins: number;\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"define-our-context-aware-ruleset",children:"Define our context-aware ruleset"}),"\n",(0,o.jsx)(n.p,{children:"We're going to group the items into two categories, based on if the user can afford them."}),"\n",(0,o.jsxs)(n.p,{children:["The second generic of groupByRule is the Context shape, and the ",(0,o.jsx)(n.code,{children:"groupFn"})," predicate will be passed the context object at runtime."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'const rule = groupByRule<Food, PetFoodStoreContext>({\n        id: "can_afford",\n        groupFn: (item, context) => {\n            // highlight-start\n            const canAfford = item.price < context.numCoins;\n            // highlight-end\n            return canAfford ? "Can purchase" : "Too expensive";\n        },\n        sticky: {\n            header: "Can purchase",\n        },\n    }),\n});\n'})}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsx)(n.p,{children:"Rules are re-hydrated whenever the items array or context reference is changed, so the groupFn will always receive the current context value."})}),"\n",(0,o.jsx)(n.h3,{id:"memoize-context-reference",children:"Memoize context reference"}),"\n",(0,o.jsx)(n.p,{children:"Like any React object prop, you'll want to memoize the context to reduce re-renders."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"function PetFoodStore() {\n    const [numCoins, setNumCoins] = useState<number>(7);\n    // highlight-start\n    const context: PetFoodStoreContext = useMemo(() => {\n        return {\n            numCoins,\n        };\n    }, [numCoins]);\n    // highlight-end\n    return (\n        <Finder items={items} rules={rules} context={context} requireGroup={true}>\n                <Finder.Content>\n                    {{\n                        groups: PetFoodStoreGroups,\n                    }}\n                </Finder.Content>\n            </div>\n        </Finder>\n    );\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"For this example we're using a groupByRule, but all rules are passed the context reference."})]})}function y(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(C,{...e})}):C(e)}}}]);